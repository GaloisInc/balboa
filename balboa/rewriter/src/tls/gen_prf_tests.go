// NOTE: this file contains code copy-pasted from the golang TLS library

package main

import (
	"crypto/hmac"
	"crypto/rand"
	"crypto/sha256"
	"crypto/sha512"
	"fmt"
	"hash"
)

func pHash(result, secret, seed []byte, hash func() hash.Hash) {
	h := hmac.New(hash, secret)
	h.Write(seed)
	a := h.Sum(nil)

	j := 0
	for j < len(result) {
		h.Reset()
		h.Write(a)
		h.Write(seed)
		b := h.Sum(nil)
		copy(result[j:], b)
		j += len(b)

		h.Reset()
		h.Write(a)
		a = h.Sum(nil)
	}
}

func prf12(hashFunc func() hash.Hash) func(result, secret, label, seed []byte) {
	return func(result, secret, label, seed []byte) {
		labelAndSeed := make([]byte, len(label)+len(seed))
		copy(labelAndSeed, label)
		copy(labelAndSeed[len(label):], seed)

		pHash(result, secret, labelAndSeed, hashFunc)
	}
}

func binEncode(b []byte) string {
	out := "&["
	for i, x := range b {
		if i != 0 {
			out += ","
		}
		out += fmt.Sprintf("%d", x)
	}
	out += "]"
	return out
}

func genTests(hashFunc func() hash.Hash, digits, macLen, keyLen, ivLen int) {
	keyExpansionLabel := []byte("key expansion")
	seed := make([]byte, 64)
	rand.Read(seed)

	masterSecret := make([]byte, 48)
	rand.Read(masterSecret)

	n := 2*macLen + 2*keyLen + 2*ivLen
	keyMaterial := make([]byte, n)
	prf12(hashFunc)(keyMaterial, masterSecret, keyExpansionLabel, seed)
	fmt.Printf("PrfTestVector {n: %d, prf: Prf::SHA%d, master_secret: %s, seed: %s, expected: %s},\n", n, digits, binEncode(masterSecret), binEncode(seed), binEncode(keyMaterial))
}

func f(macLen, keyLen, ivLen int) {
	genTests(sha512.New384, 384, macLen, keyLen, ivLen)
	genTests(sha256.New, 256, macLen, keyLen, ivLen)
}

func main() {
	N := 20
	fmt.Println("// AUTOGENERATED BY gen_prf_tests.go")
	fmt.Printf("static PRF_TEST_VECTORS: [PrfTestVector; %d] = [", N*2*6)
	for i := 0; i < N; i++ {
		f(0, 32, 12)
		f(0, 16, 12)
		f(20, 16, 16)
		f(20, 32, 16)
		f(32, 16, 16)
		f(32, 32, 16)
	}
	fmt.Println("];")
}
